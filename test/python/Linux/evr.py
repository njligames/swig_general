# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_evr', [dirname(__file__)])
        except ImportError:
            import _evr
            return _evr
        if fp is not None:
            try:
                _mod = imp.load_module('_evr', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _evr = swig_import_helper()
    del swig_import_helper
else:
    import _evr
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Math(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Math, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Math, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _evr.new_Math()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _evr.delete_Math
    __del__ = lambda self: None

    def add(self, a, b):
        return _evr.Math_add(self, a, b)
Math_swigregister = _evr.Math_swigregister
Math_swigregister(Math)

class CurlExample(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurlExample, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurlExample, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _evr.new_CurlExample()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _evr.delete_CurlExample
    __del__ = lambda self: None

    def test_10_at_a_time(self):
        return _evr.CurlExample_test_10_at_a_time(self)

    def test_certinfo(self):
        return _evr.CurlExample_test_certinfo(self)

    def test_cookie_interface(self):
        return _evr.CurlExample_test_cookie_interface(self)

    def test_debug(self):
        return _evr.CurlExample_test_debug(self)

    def test_externalsocket(self):
        return _evr.CurlExample_test_externalsocket(self)

    def test_fileupload(self):
        return _evr.CurlExample_test_fileupload(self)

    def test_ftpget(self):
        return _evr.CurlExample_test_ftpget(self)

    def test_ftpgetinfo(self):
        return _evr.CurlExample_test_ftpgetinfo(self)

    def test_ftpgetresp(self):
        return _evr.CurlExample_test_ftpgetresp(self)

    def test_ftpsget(self):
        return _evr.CurlExample_test_ftpsget(self)

    def test_ftpupload(self):
        return _evr.CurlExample_test_ftpupload(self)

    def test_ftpuploadfrommem(self):
        return _evr.CurlExample_test_ftpuploadfrommem(self)

    def test_ftpuploadresume(self):
        return _evr.CurlExample_test_ftpuploadresume(self)

    def test_getinfo(self):
        return _evr.CurlExample_test_getinfo(self)

    def test_getinmemory(self):
        return _evr.CurlExample_test_getinmemory(self)

    def test_getredirect(self):
        return _evr.CurlExample_test_getredirect(self)

    def test_http_post(self):
        return _evr.CurlExample_test_http_post(self)

    def test_http2_pushinmemory(self):
        return _evr.CurlExample_test_http2_pushinmemory(self)

    def test_http2_serverpush(self):
        return _evr.CurlExample_test_http2_serverpush(self)

    def test_httpcustomheader(self):
        return _evr.CurlExample_test_httpcustomheader(self)

    def test_https(self):
        return _evr.CurlExample_test_https(self)

    def test_imap_append(self):
        return _evr.CurlExample_test_imap_append(self)

    def test_imap_copy(self):
        return _evr.CurlExample_test_imap_copy(self)

    def test_imap_create(self):
        return _evr.CurlExample_test_imap_create(self)

    def test_imap_delete(self):
        return _evr.CurlExample_test_imap_delete(self)

    def test_imap_examine(self):
        return _evr.CurlExample_test_imap_examine(self)

    def test_imap_fetch(self):
        return _evr.CurlExample_test_imap_fetch(self)

    def test_imap_list(self):
        return _evr.CurlExample_test_imap_list(self)

    def test_imap_lsub(self):
        return _evr.CurlExample_test_imap_lsub(self)

    def test_imap_multi(self):
        return _evr.CurlExample_test_imap_multi(self)

    def test_imap_noop(self):
        return _evr.CurlExample_test_imap_noop(self)

    def test_imap_search(self):
        return _evr.CurlExample_test_imap_search(self)

    def test_imap_ssl(self):
        return _evr.CurlExample_test_imap_ssl(self)

    def test_imap_store(self):
        return _evr.CurlExample_test_imap_store(self)

    def test_imap_tls(self):
        return _evr.CurlExample_test_imap_tls(self)

    def test_multi_app(self):
        return _evr.CurlExample_test_multi_app(self)

    def test_multi_debugcallback(self):
        return _evr.CurlExample_test_multi_debugcallback(self)

    def test_multi_double(self):
        return _evr.CurlExample_test_multi_double(self)

    def test_multi_formadd(self):
        return _evr.CurlExample_test_multi_formadd(self)

    def test_multi_single(self):
        return _evr.CurlExample_test_multi_single(self)

    def test_persistent(self):
        return _evr.CurlExample_test_persistent(self)

    def test_pop3_dele(self):
        return _evr.CurlExample_test_pop3_dele(self)

    def test_pop3_list(self):
        return _evr.CurlExample_test_pop3_list(self)

    def test_pop3_multi(self):
        return _evr.CurlExample_test_pop3_multi(self)

    def test_pop3_noop(self):
        return _evr.CurlExample_test_pop3_noop(self)

    def test_pop3_retr(self):
        return _evr.CurlExample_test_pop3_retr(self)

    def test_pop3_ssl(self):
        return _evr.CurlExample_test_pop3_ssl(self)

    def test_pop3_stat(self):
        return _evr.CurlExample_test_pop3_stat(self)

    def test_pop3_tls(self):
        return _evr.CurlExample_test_pop3_tls(self)

    def test_pop3_top(self):
        return _evr.CurlExample_test_pop3_top(self)

    def test_pop3_uidl(self):
        return _evr.CurlExample_test_pop3_uidl(self)

    def test_post_callback(self):
        return _evr.CurlExample_test_post_callback(self)

    def test_postinmemory(self):
        return _evr.CurlExample_test_postinmemory(self)

    def test_resolve(self):
        return _evr.CurlExample_test_resolve(self)

    def test_sendrecv(self):
        return _evr.CurlExample_test_sendrecv(self)

    def test_sepheaders(self):
        return _evr.CurlExample_test_sepheaders(self)

    def test_sftpget(self):
        return _evr.CurlExample_test_sftpget(self)

    def test_sftpuploadresume(self):
        return _evr.CurlExample_test_sftpuploadresume(self)

    def test_shared_connection_cache(self):
        return _evr.CurlExample_test_shared_connection_cache(self)

    def test_simple(self):
        return _evr.CurlExample_test_simple(self)

    def test_simplepost(self):
        return _evr.CurlExample_test_simplepost(self)

    def test_simplessl(self):
        return _evr.CurlExample_test_simplessl(self)

    def test_smtp_expn(self):
        return _evr.CurlExample_test_smtp_expn(self)

    def test_smtp_mail(self):
        return _evr.CurlExample_test_smtp_mail(self)

    def test_smtp_multi(self):
        return _evr.CurlExample_test_smtp_multi(self)

    def test_smtp_ssl(self):
        return _evr.CurlExample_test_smtp_ssl(self)

    def test_smtp_tls(self):
        return _evr.CurlExample_test_smtp_tls(self)

    def test_smtp_vrfy(self):
        return _evr.CurlExample_test_smtp_vrfy(self)

    def test_threaded_shared_conn(self):
        return _evr.CurlExample_test_threaded_shared_conn(self)

    def test_usercertinmem(self):
        return _evr.CurlExample_test_usercertinmem(self)
CurlExample_swigregister = _evr.CurlExample_swigregister
CurlExample_swigregister(CurlExample)

class CurlMan(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurlMan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurlMan, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _evr.new_CurlMan()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Post(self):
        return _evr.CurlMan_Post(self)

    def Clear(self):
        return _evr.CurlMan_Clear(self)

    def Add(self, Name, Value):
        return _evr.CurlMan_Add(self, Name, Value)

    def Update(self, Name, Value):
        return _evr.CurlMan_Update(self, Name, Value)

    def SetDomain(self, NewDomain):
        return _evr.CurlMan_SetDomain(self, NewDomain)
    __swig_destroy__ = _evr.delete_CurlMan
    __del__ = lambda self: None
CurlMan_swigregister = _evr.CurlMan_swigregister
CurlMan_swigregister(CurlMan)

class DCDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DCDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DCDefinition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kTypeNames"] = _evr.DCDefinition_kTypeNames_set
    __swig_getmethods__["kTypeNames"] = _evr.DCDefinition_kTypeNames_get
    if _newclass:
        kTypeNames = _swig_property(_evr.DCDefinition_kTypeNames_get, _evr.DCDefinition_kTypeNames_set)
    __swig_setmethods__["components"] = _evr.DCDefinition_components_set
    __swig_getmethods__["components"] = _evr.DCDefinition_components_get
    if _newclass:
        components = _swig_property(_evr.DCDefinition_components_get, _evr.DCDefinition_components_set)

    def __init__(self):
        this = _evr.new_DCDefinition()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _evr.delete_DCDefinition
    __del__ = lambda self: None
DCDefinition_swigregister = _evr.DCDefinition_swigregister
DCDefinition_swigregister(DCDefinition)

class DCComponent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DCComponent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DCComponent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _evr.new_DCComponent(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def get_type(self):
        return _evr.DCComponent_get_type(self)

    def set_value(self, *args):
        return _evr.DCComponent_set_value(self, *args)

    def set_value_int(self, Field, Value):
        return _evr.DCComponent_set_value_int(self, Field, Value)

    def set_value_dbl(self, Field, Value):
        return _evr.DCComponent_set_value_dbl(self, Field, Value)

    def set_value_bol(self, Field, Value):
        return _evr.DCComponent_set_value_bol(self, Field, Value)

    def to_string(self):
        return _evr.DCComponent_to_string(self)
    __swig_destroy__ = _evr.delete_DCComponent
    __del__ = lambda self: None
DCComponent_swigregister = _evr.DCComponent_swigregister
DCComponent_swigregister(DCComponent)

class ElementRef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementRef, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Idx"] = _evr.ElementRef_Idx_set
    __swig_getmethods__["Idx"] = _evr.ElementRef_Idx_get
    if _newclass:
        Idx = _swig_property(_evr.ElementRef_Idx_get, _evr.ElementRef_Idx_set)
    __swig_setmethods__["Type"] = _evr.ElementRef_Type_set
    __swig_getmethods__["Type"] = _evr.ElementRef_Type_get
    if _newclass:
        Type = _swig_property(_evr.ElementRef_Type_get, _evr.ElementRef_Type_set)

    def __init__(self):
        this = _evr.new_ElementRef()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _evr.delete_ElementRef
    __del__ = lambda self: None
ElementRef_swigregister = _evr.ElementRef_swigregister
ElementRef_swigregister(ElementRef)

class DCHVLayout(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DCHVLayout, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DCHVLayout, name)
    __repr__ = _swig_repr

    def __init__(self, NewLayoutType):
        this = _evr.new_DCHVLayout(NewLayoutType)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def get_type(self):
        return _evr.DCHVLayout_get_type(self)

    def get_style(self):
        return _evr.DCHVLayout_get_style(self)

    def set_style(self, NewStyle):
        return _evr.DCHVLayout_set_style(self, NewStyle)

    def set_idx(self, NewIdx):
        return _evr.DCHVLayout_set_idx(self, NewIdx)

    def add_component(self, ComponentType, Idx):
        return _evr.DCHVLayout_add_component(self, ComponentType, Idx)

    def to_string(self):
        return _evr.DCHVLayout_to_string(self)
    __swig_destroy__ = _evr.delete_DCHVLayout
    __del__ = lambda self: None
DCHVLayout_swigregister = _evr.DCHVLayout_swigregister
DCHVLayout_swigregister(DCHVLayout)

class DCLayout(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DCLayout, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DCLayout, name)
    __repr__ = _swig_repr

    def get_type(self):
        return _evr.DCLayout_get_type(self)

    def set_type(self, NewType):
        return _evr.DCLayout_set_type(self, NewType)

    def set_style(self, NewStyle):
        return _evr.DCLayout_set_style(self, NewStyle)

    def add_layout(self, LayoutType):
        return _evr.DCLayout_add_layout(self, LayoutType)

    def get_cur_layout(self):
        return _evr.DCLayout_get_cur_layout(self)

    def set_layout(self, Layout):
        return _evr.DCLayout_set_layout(self, Layout)

    def to_string(self):
        return _evr.DCLayout_to_string(self)

    def __init__(self):
        this = _evr.new_DCLayout()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _evr.delete_DCLayout
    __del__ = lambda self: None
DCLayout_swigregister = _evr.DCLayout_swigregister
DCLayout_swigregister(DCLayout)

class DCCollector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DCCollector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DCCollector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Text"] = _evr.DCCollector_Text_set
    __swig_getmethods__["Text"] = _evr.DCCollector_Text_get
    if _newclass:
        Text = _swig_property(_evr.DCCollector_Text_get, _evr.DCCollector_Text_set)
    __swig_setmethods__["Image"] = _evr.DCCollector_Image_set
    __swig_getmethods__["Image"] = _evr.DCCollector_Image_get
    if _newclass:
        Image = _swig_property(_evr.DCCollector_Image_get, _evr.DCCollector_Image_set)
    __swig_setmethods__["Button"] = _evr.DCCollector_Button_set
    __swig_getmethods__["Button"] = _evr.DCCollector_Button_get
    if _newclass:
        Button = _swig_property(_evr.DCCollector_Button_get, _evr.DCCollector_Button_set)
    __swig_setmethods__["Checkbox"] = _evr.DCCollector_Checkbox_set
    __swig_getmethods__["Checkbox"] = _evr.DCCollector_Checkbox_get
    if _newclass:
        Checkbox = _swig_property(_evr.DCCollector_Checkbox_get, _evr.DCCollector_Checkbox_set)
    __swig_setmethods__["Gantt"] = _evr.DCCollector_Gantt_set
    __swig_getmethods__["Gantt"] = _evr.DCCollector_Gantt_get
    if _newclass:
        Gantt = _swig_property(_evr.DCCollector_Gantt_get, _evr.DCCollector_Gantt_set)
    __swig_setmethods__["Sequencedia"] = _evr.DCCollector_Sequencedia_set
    __swig_getmethods__["Sequencedia"] = _evr.DCCollector_Sequencedia_get
    if _newclass:
        Sequencedia = _swig_property(_evr.DCCollector_Sequencedia_get, _evr.DCCollector_Sequencedia_set)
    __swig_setmethods__["Flowchart"] = _evr.DCCollector_Flowchart_set
    __swig_getmethods__["Flowchart"] = _evr.DCCollector_Flowchart_get
    if _newclass:
        Flowchart = _swig_property(_evr.DCCollector_Flowchart_get, _evr.DCCollector_Flowchart_set)
    __swig_setmethods__["Linegraph"] = _evr.DCCollector_Linegraph_set
    __swig_getmethods__["Linegraph"] = _evr.DCCollector_Linegraph_get
    if _newclass:
        Linegraph = _swig_property(_evr.DCCollector_Linegraph_get, _evr.DCCollector_Linegraph_set)

    def __init__(self, LayoutType):
        this = _evr.new_DCCollector(LayoutType)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _evr.delete_DCCollector
    __del__ = lambda self: None

    def add_layout(self, LayoutType):
        return _evr.DCCollector_add_layout(self, LayoutType)

    def add_component(self, ComponentType, ComponentJson):
        return _evr.DCCollector_add_component(self, ComponentType, ComponentJson)

    def to_string(self):
        return _evr.DCCollector_to_string(self)

    def gen_string(self, Name, Element):
        return _evr.DCCollector_gen_string(self, Name, Element)
DCCollector_swigregister = _evr.DCCollector_swigregister
DCCollector_swigregister(DCCollector)

# This file is compatible with both classic and new-style classes.


