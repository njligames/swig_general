/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: /Users/james.folk/work/evr-internals-api/swig.in/evr-internals-api.i

package evr

import "syscall"
import "unsafe"
import "sync"


type _ syscall.Sockaddr




type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


type _ sync.Mutex

func SwigCgocall()
func SwigCgocallDone()
func SwigCgocallBack()
func SwigCgocallBackDone()

//extern go.evr__wrap_Swig_free_evr_ac58834d2a17de9b
func _swig_wrap_Swig_free(base uintptr)

func Swig_free(arg1 uintptr) {
	defer SwigCgocallDone()
	SwigCgocall()
	_swig_wrap_Swig_free(arg1)
}

//extern go.evr__wrap_Swig_malloc_evr_ac58834d2a17de9b
func _swig_wrap_Swig_malloc(base int) (_ uintptr)

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	defer SwigCgocallDone()
	SwigCgocall()
	return _swig_wrap_Swig_malloc(arg1)
}

type SwigcptrMath uintptr

func (p SwigcptrMath) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrMath) SwigIsMath() {
}

//extern go.evr__wrap_new_Math_evr_ac58834d2a17de9b
func _swig_wrap_new_Math() (base SwigcptrMath)

func NewMath() (_swig_ret Math) {
	var swig_r Math
	func() {
	defer SwigCgocallDone()
	SwigCgocall()
	swig_r = _swig_wrap_new_Math()
	}()
	return swig_r
}

//extern go.evr__wrap_delete_Math_evr_ac58834d2a17de9b
func _swig_wrap_delete_Math(base uintptr)

func DeleteMath(arg1 Math) {
	defer SwigCgocallDone()
	SwigCgocall()
	_swig_wrap_delete_Math(arg1.Swigcptr())
}

//extern go.evr__wrap_Math_add_evr_ac58834d2a17de9b
func _swig_wrap_Math_add(base SwigcptrMath, _ float64, _ float64) (_ float64)

func (arg1 SwigcptrMath) Add(arg2 float64, arg3 float64) (_swig_ret float64) {
	defer SwigCgocallDone()
	SwigCgocall()
	return _swig_wrap_Math_add(arg1, arg2, arg3)
}

type Math interface {
	Swigcptr() uintptr
	SwigIsMath()
	Add(arg2 float64, arg3 float64) (_swig_ret float64)
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}

